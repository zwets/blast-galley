#!/bin/sh
#
#  blastdb-select - Select entries from a blast database
#  Copyright (C) 2016  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Created on 2016-01-27

# Defaults

BLAST_DB=nt
OUTFMT="%g	%T	%l"

# Function to exit this script with an error message on stderr
err_exit() {
	echo "$(basename "$0"): $*" >&2
	exit 1
}

# Function to show usage information and exit
usage_exit() {
	echo "
Usage: $(basename $0) [OPTIONS]

  Select entries from a blast database based on taxonomy and length.

  Writes to standard output the list of entries from local BLAST database DB.
  Entries by default have tab-separated fields GI, TAXID, length.

  Options
   -d|-db|--db DB      Use database DB (default: $BLAST_DB)
   -a|--all            Output the the entire database
   -t|--taxids T[,..]  Output any entry whose taxid is in comma-separated list
   -m|--member TAXID   Output any entry which descends from TAXID.
   -l|--length MIN     Only output entries whose sequence length is at least LEN
   -e|--extra STRING   Add extra output fields.  STRING is appended to the 
                       default '%g %T %l', separated by a tab.  
                       Specifiers are passed to blastdbcmd -outfmt:
                        %s bare sequence data; %a accession; %o OID
                        %t sequence title; %L common taxonomic name; %S scientific name

  @TODO@ NCBI is phasing out gi, change to accession:version (%a) as the default.
  But wait until blastn loses its gi-related functionality (esp. -gilist).

  @TODO@ the blastdbcmd command for some reason takes a huge amount of time
  before it starts returning records when invoked with '-entry all'.  This could
  be optimised by generating the all-entry dump once and reuse it.
" >&2
	exit ${1:-1}
}

# At least one option must be specified

[ $# -ne 0 ] || usage_exit

# Parse options

MIN_LEN=0
unset TAXID_LIST TAXID_MEMBER OUTFMT_EXTRA

while [ $# -ne 0 -a "$(expr "$1" : '\(.[0-9]*\).*')" = "-" ]; do
	case $1 in
	--db=*)
		BLAST_DB="${1#--db=}"
		;;
	-d|-db|--db)
		shift; [ $# -ge 1 ] || usage_exit
		BLAST_DB="$1"
		;;
	-a|--all)
		DUMP_ALL=1
		;;
	--length=*)
		MIN_LEN="${1#--length=}"
		;;
	-l|--length)
		shift; [ $# -ge 1 ] || usage_exit
		MIN_LEN="$1"
		;;
	--taxids=*)
		TAXID_LIST="${1#--taxids=}"
		;;
	-t|--taxid*)
		shift; [ $# -ge 1 ] || usage_exit
		TAXID_LIST="$1"
		;;
	--member=*)
		TAXID_MEMBER="${1#--member=}"
		;;
	-m|--member)
		shift; [ $# -ge 1 ] || usage_exit
		TAXID_MEMBER="$1"
		;;
	--extra=*)
		OUTFMT_EXTRA="${1#--extra=}"
		;;
	-e|--extra)
		shift; [ $# -ge 1 ] || usage_exit
		OUTFMT_EXTRA="$1"
		;;
	-h|--help)
		usage_exit 0
		;;
	*) usage_exit
		;;
	esac
	shift
done

# Process options

[ -z "$OUTFMT_EXTRA" ] || OUTFMT="$OUTFMT	$OUTFMT_EXTRA"

# For the TAXID_MEMBER option, we need the "nodes.dmp" file.
# We use the same environment variable as the taxo utility does.

[ -z "$TAXID_MEMBER" ] || [ -f "${NCBI_TAXDUMP_DIR:-.}/nodes.dmp" ] ||
err_exit \
"the --member option requires the NCBI taxdump file 'nodes.dmp' 
to be either in the current directory or in the directory given
by environment variable \$NCBI_TAXDUMP_DIR"

# Do the work

CACHE_FILE="${NCBI_TAXDUMP_DIR:-.}/${BLAST_DB}_gi_taxid_length.gz"

if [ -f "$CACHE_FILE" ]; then
	zcat "$CACHE_FILE"
else
	blastdbcmd -db "$BLAST_DB" -entry all -outfmt "$OUTFMT"
fi | awk -b -O -v L="$MIN_LEN" -v TL="$TAXID_LIST" -v TM="$TAXID_MEMBER" -v NODES_DMP="${NCBI_TAXDUMP_DIR:-"."}/nodes.dmp" '
function has_ancestor(i,j) { p = TAXPAR[i]; return i != 1 && (p == j || has_ancestor(p,j)) }
BEGIN { 
	# Split the taxid list TL into array TA
	split(TL,TA,",")
	# Make the TAXIDS array (having TAXIDS[t]=1 if t is TA) from the TA
        for (i in TA) TAXIDS[TA[i]] = 1
	delete TA

	# If TM (TAXID_MEMBER), parse the taxdump nodes file
	if (TM) {
		FS="\t\\|\t"; RS="\t\\|\n"
		while (getline <NODES_DMP == 1) TAXPAR[$1] = $2
		close(NODES_DMP)

		# Add all children of TM and TM self to TAXIDS
		for (k in TAXPAR) if (has_ancestor(k,TM)) TAXIDS[k] = 1
		TAXIDS[TM] = 1
		delete TAXPAR
	}

	# Reset separators
	FS="\t"; RS="\n"
}
$3 >= L && $2 in TAXIDS
'
