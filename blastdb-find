#!/bin/sh
#
#  blastdb-find - search a BLAST database by taxonomy id or title
#  Copyright (C) 2016  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Part of https://github.com/zwets/blast-galley (see LICENSE).

# Defaults
DATABASE="nt"

# Function to write the arguments to stderr if VERBOSE is set
emit() {
    if [ $VERBOSE ]; then echo "$(basename "$0"): $*" >&2; fi
}

# Function to emit a message to stderr
message() {
    echo "$(basename "$0"): $*" >&2
}

# Function to exit this script with an error message on stderr
err_exit() {
    echo "$(basename "$0"): $*" >&2
    exit 1
}

# Function to create or update cache file "$1".
# The resulting file has tab-separated fields: sequence ID, accession, taxid, length, title"
make_cache_file() {

    if [ -f "$M" ]; then
        [ -w "$M" ] || 
            err_exit "cache file out of date but not writable: $M; use -n or -u or run as sudo"
        message "updating metadata cache file (this may take a while): $M"
    elif [ ! -w "$(dirname "$M")" ]; then
        err_exit "no permission to create cache file $M; use -u or run as sudo"
        message "creating metadata cache file (this may take a while): $M"
    fi

    blastdbcmd -db "$DATABASE" -entry all -outfmt '%i    %a    %T    %l    %t' | 
        gzip -9 -c > "$M" || err_exit "failed to create cache file: $M"
}

# Function to show usage information and exit
usage_exit() {
    echo "
Usage: $(basename "$0") [OPTIONS] [FILTERS] [REGEX]

  Search for sequences in a BLAST database whose title matches REGEX,
  optionally filtering by sequence ID, taxonomy ID and/or sequence length.

  REGEX
   An extended regular expression to match against the sequence titles.
   Matching is case-insensitive.  Absence of the REGEX selects all sequences.

  FILTERS
   -i|--id ID        select on (regex match of ID with) sequence identifier
   -t|--taxid TAXID  select on NCBI taxonomy identifier
        See http://github.com/zwets/blast-galley/taxo for a taxonomy browser
   -l|--len LEN      limit results to sequences of at least length LEN
   -m|--max-len LEN  limit results to sequences of at most length LEN

  OPTIONS
   -d|--db DB      database (default: $DATABASE)
   -n|--no-update  do not update the metadata cache
   -u|--use-tmp    use or create metadata cache in /tmp
   -f|--fasta      output the matching FASTA sequences rather than metadata 
   -v|--verbose    verbose output
   -h|--help       this help

  OUTPUT is a tab-separated list with fields: SEQID ACCID TAXID LENGTH TITLE,
  or (with option --fasta) the sequences in FASTA format.

  FILTERS and OPTION arguments may occur in any order.  Both 'ID-query options'
  (-i, -t) may be repeated to specify an OR-ed set of choices for each.
  Otherwise, all query criteria are AND-ed together.

  Note that this program, when invoked for the first time on a database, will
  create a metadata cache for that database.  This may take a long while for
  large databases.  Subsequent queries will be fast.  If a cache file exists,
  the script will validate that it is not stale and update it when needed.

  If the BLAST database directory is not writable, use option -u|--use-tmp to
  write the cache file to /tmp, or use -n|--no-update to use the (potentially
  stale) existing cache.
  "
    exit ${1:-1}
}

# Field positions in the metadata cache file
SPOS='$1'; APOS='$2'; TPOS='$3'; LPOS='$4'; RPOS='$NF'

# Parse options

unset ACCID SEQID TAXID REGEX MINLEN MAXLEN FASTA NO_UPDATE USE_TMP
while [ $# -ne 0 -a "$(expr "$1" : '\(.\).*')" = "-" ]; do
    case $1 in
    --id=*)
        SEQID="${SEQID:+"$SEQID || "}($SPOS ~ \"${1#--seqid=}\")"
        ;;
    -i|--id)
        shift
        SEQID="${SEQID:+"$SEQID || "}($SPOS ~ \"$1\")"
        ;;
    --taxid=*)
        TAXID="${TAXID:+"$TAXID || "}($TPOS == \"${1#--taxid=}\")"
        ;;
    -t|--taxid)
        shift
        TAXID="${TAXID:+"$TAXID || "}($TPOS == \"$1\")"
        ;;
    --len=*)
        MINLEN=${1#--len=}
        ;;
    -l|--len|--min-len)
        shift
        MINLEN=$1
        ;;
    --max-len=*)
        MAXLEN=${1#--max-len=}
        ;;
    -m|--max|--max-len)
        shift
        MAXLEN=$1
        ;;
    --db=*)
        DATABASE=${1#--db=}
        ;;
    -d|-db|--db)
        shift
        DATABASE=$1
        ;;
    -f|--fasta)
        FASTA=1
        ;;
    -n|--no-update)
        NO_UPDATE=1
        ;;
    -u|--use-tmp)
        USE_TMP=1
        ;;
    -h|--help)
        usage_exit 0
        ;;
    -v|--verbose)
        VERBOSE=1
        ;;
    *) usage_exit
        ;;
    esac
    shift
done

# Argument REGEX captures rest of the command-line
[ $# -eq 0 ] || REGEX="$*"

# Determine P as path to directory of (last volume of) DATABASE 
P="$(blastdbcmd -info -db "$DATABASE" 2>/dev/null | tail -1 | sed -e 's/^[ \t]*//')"
[ -n "$P" ] || err_exit "no such database: $DATABASE"
P="$(dirname "$P")"
emit "database directory: $P"

# Establish M as metadata filename either in database directory or in /tmp
F="$(basename "$DATABASE").metadata.gz"
M="$P/$F"
[ -n "$USE_TMP" ] || [ ! -f "$M" -a -f "/tmp/$F" ] && M="/tmp/$F"
emit "metadata cache file: $M"

# Check that M is up to date if it exists
if [ -f "$M" ] && [ -z "$NO_UPDATE" ]; then
    emit "checking staleness of metadata cache file: $M"
    for D in $P/$(basename "$DATABASE")*; do
        [ -f "$D" ] || continue
        [ "$D" -nt "$M" ] && { make_cache_file "$M" ; break; }
    done
fi

# Check that M exists
[ -f "$M" ] || make_cache_file "$M"

# Build up the AWK query
AWK_QUERY="1"
[ -z "$ACCID" ]  || AWK_QUERY="$AWK_QUERY && ($ACCID)"
[ -z "$SEQID" ]  || AWK_QUERY="$AWK_QUERY && ($SEQID)"
[ -z "$TAXID" ]  || AWK_QUERY="$AWK_QUERY && ($TAXID)"
[ -z "$MINLEN" ] || AWK_QUERY="$AWK_QUERY && ($LPOS >= $MINLEN)"
[ -z "$MAXLEN" ] || AWK_QUERY="$AWK_QUERY && ($LPOS <= $MAXLEN)"
[ -z "$REGEX" ]  || AWK_QUERY="$AWK_QUERY && match($RPOS,R)"

# And go
emit "awk query: $AWK_QUERY"
if [ -z "$FASTA" ]; then
    zcat "$M" | awk -b -O -F '\t' -v IGNORECASE=1 -v R="$REGEX" "$AWK_QUERY"
else
    zcat "$M" | awk -b -O -F '\t' -v IGNORECASE=1 -v R="$REGEX" "$AWK_QUERY {print \$1}" | while read V; do ENTRIES="${ENTRIES:+$ENTRIES,}$V"; done
    blastdbcmd -db "$DATABASE" -entry "$ENTRIES"
fi

# vim: sts=4:sw=4:ai:si:et:
